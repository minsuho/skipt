알겠습니다! **2번 방식 (현재 시장 가격은 주기적으로만 업데이트하고, 슬리피지는 개별 거래 비용에만 반영)**을 기반으로, 플레이어들이 "계속 봐야 하는" 부담을 줄이면서도 이전의 문제점(대량 구매로 인한 즉시 이익)을 해결하는 전체 수식 흐름을 한글 변수를 사용하여 정리해 드리겠습니다.

**핵심 변경점:**

*   **매수/매도 함수 내부에 "슬리피지" 계산 및 적용 로직 추가.**
*   주기적인 가격 업데이트 로직은 이전 "최최종 수식 흐름"을 거의 그대로 따르되, `현재_가격`은 주기 시작 시점의 가격을 기준으로 합니다.

---

**사전 정의 및 가정:**

*   **주기적 업데이트 간격:** 예: 매 10분
*   **주요 변수 (주식별):**
    *   `현재_시장_가격`: 주기 시작 시점 또는 바로 직전 업데이트된 해당 주식의 가격 (이 값은 주기 내내 고정)
    *   `실제_유통_주식_수` (또는 `가격_계산_기준_주식_수`): 이전에 `total_shares`로 불렀던, 가격 변동폭 계산의 기준이 되는 주식 수 (실제 플레이어간 거래 가능 물량과는 다름, 서버는 무한 유동성 공급 가정)
    *   `이번_주기_총매수량`: 이번 주기 동안 플레이어들이 이 주식을 산 총 개수 (슬리피지 적용 후 실제 체결된 수량)
    *   `이번_주기_총매도량`: 이번 주기 동안 플레이어들이 이 주식을 판 총 개수 (슬리피지 적용 후 실제 체결된 수량)
    *   `단기_이평선_가격`, `장기_이평선_가격`, `초기_상장가` 등은 이전과 동일.
*   **파라미터 (이전 추천값 사용 + 슬리피지 관련 파라미터 추가):**
    *   `슬리피지_유동성_계수 = 0.1` (이 값이 작을수록 슬리피지가 커짐. `실제_유통_주식_수`의 10% 정도 거래량부터 슬리피지 체감되도록)
    *   `슬리피지_민감도 = 0.5` (슬리피지가 가격에 얼마나 민감하게 반응할지)
    *   (나머지 파라미터는 이전 "최최종 수식"의 추천값과 동일)

---

**1. 플레이어 매수 함수 (예: `/주식매수 <주식코드> <수량>`) 실행 시:**

    가. **기본 확인:** (돈 충분한지, 주식 존재하는지 등)
    나. **슬리피지 계산 (매수 시):**
        1. `주문_영향력 = 구매_요청_수량 / (실제_유통_주식_수 * 슬리피지_유동성_계수)`
        2. `슬리피지_비율 = 주문_영향력 * 슬리피지_민감도`
        3. `실제_체결_단가 = 현재_시장_가격 * (1 + 슬리피지_비율)`
           *   *주의: `현재_시장_가격`은 주기 내내 변하지 않는 값입니다.*
    다. **최종 거래 비용 계산:**
        1. `총_구매_비용 = 실제_체결_단가 * 구매_요청_수량`
        2. (선택적) `거래_수수료` 추가 계산 및 `총_구매_비용`에 합산.
    라. **플레이어 돈 차감 및 주식 지급:**
        1. 플레이어 돈에서 `총_구매_비용` 차감.
        2. 플레이어에게 해당 주식 `구매_요청_수량`만큼 지급.
    마. **주기적 업데이트를 위한 데이터 누적:**
        1. `이번_주기_총매수량`에 `구매_요청_수량` 더하기.
    바. **플레이어에게 알림:** "OO 주식 N주를 평균 단가 X원에 매수했습니다. (슬리피지로 인해 예상보다 Y원 더 지불)"

---

**2. 플레이어 매도 함수 (예: `/주식매도 <주식코드> <수량>`) 실행 시:**

    가. **기본 확인:** (보유 주식 충분한지 등)
    나. **슬리피지 계산 (매도 시):**
        1. `주문_영향력 = 판매_요청_수량 / (실제_유통_주식_수 * 슬리피지_유동성_계수)`
        2. `슬리피지_비율 = 주문_영향력 * 슬리피지_민감도`
        3. `실제_체결_단가 = 현재_시장_가격 * (1 - 슬리피지_비율)`
           *   *주의: `현재_시장_가격`은 주기 내내 변하지 않는 값입니다.*
    다. **최종 수령 금액 계산:**
        1. `총_판매_수익 = 실제_체결_단가 * 판매_요청_수량`
        2. (선택적) `거래_수수료` 계산 및 `총_판매_수익`에서 차감.
    라. **플레이어 주식 차감 및 돈 지급:**
        1. 플레이어 보유 주식에서 `판매_요청_수량`만큼 차감.
        2. 플레이어에게 `총_판매_수익`만큼 돈 지급.
    마. **주기적 업데이트를 위한 데이터 누적:**
        1. `이번_주기_총매도량`에 `판매_요청_수량` 더하기.
    바. **플레이어에게 알림:** "OO 주식 N주를 평균 단가 X원에 매도했습니다. (슬리피지로 인해 예상보다 Y원 덜 받음)"

---

**3. 주기적 업데이트 시 주가 변동 수식 흐름 (이전 "최최종 수식"과 거의 동일):**

    *   **주기 시작 시 `현재_시장_가격` 값 고정.**
    *   **업데이트 시점까지 누적된 `이번_주기_총매수량`과 `이번_주기_총매도량` 사용.**

    **3-1. 플레이어 수요공급 영향 계산:**
        a.  `순매수량 = 이번_주기_총매수량 - 이번_주기_총매도량`
        b.  `총거래량 = 이번_주기_총매수량 + 이번_주기_총매도량`
        c.  `최소거래량_보정값 = max(1, 실제_유통_주식_수 * min_trade_volume_adj_ratio)`
        d.  `수요압박_비율 = 0`
            `if 총거래량 > 0 then 수요압박_비율 = 순매수량 / (총거래량 + 최소거래량_보정값)`
        e.  `기본_수요_변동률 = 수요압박_비율 * base_demand_sensitivity`
        f.  `순매수량_절대값 = abs(순매수량)`
        g.  `대량매매_기준_거래량 = 실제_유통_주식_수 * large_trade_threshold_ratio`
        h.  `대량매매_가중치 = 1`
            `if 순매수량_절대값 > 대량매매_기준_거래량 then`
                `초과비율 = (순매수량_절대값 - 대량매매_기준_거래량) / 대량매매_기준_거래량`
                `대량매매_가중치 = 1 + (초과비율 * large_trade_additional_sensitivity)`
                `대량매매_가중치 = min(대량매매_가중치, large_trade_multiplier_cap)`
        i.  `최종_수요공급_변동률 = 기본_수요_변동률 * 대량매매_가중치`

    **3-2. 시장 심리/모멘텀 영향 계산:** (이전과 동일)
        a.  `이평선_차이_비율 = 0`
            `if 장기_이평선_가격 > 0 then 이평선_차이_비율 = (단기_이평선_가격 - 장기_이평선_가격) / 장기_이평선_가격`
        b.  `시장심리_변동률 = 이평선_차이_비율 * market_sentiment_sensitivity`

    **3-3. 최소 기본 변동성 계산:** (이전과 동일)
        a.  `랜덤_요소 = random_real_number_between(-1, 1)`
        b.  `기본_변동률 = 랜덤_요소 * max_base_volatility_rate`

    **3-4. 총합 변동률 계산 및 새로운 `현재_시장_가격` 결정:**
        a.  `총_변동률 = 최종_수요공급_변동률 + 시장심리_변동률 + 기본_변동률`
        b.  `총_변동률 = max(-overall_change_rate_cap, min(overall_change_rate_cap, 총_변동률))`
        c.  `새로운_시장_가격 = 현재_시장_가격 * (1 + 총_변동률)`
        d.  `새로운_시장_가격 = max(0.01, 새로운_시장_가격)`

    **3-5. 주기적 데이터 초기화, 히스토리 기록, `현재_시장_가격` 업데이트:**
        a.  `이번_주기_총매수량 = 0`
        b.  `이번_주기_총매도량 = 0`
        c.  `현재_시장_가격`을 `새로운_시장_가격`으로 업데이트 (이것이 다음 주기의 기준 가격이 됨).
        d.  `새로운_시장_가격`과 `총거래량`을 히스토리로 기록.

    **3-6. 상장 폐지 조건 확인:** (이전과 동일)
        a.  `상장폐지_기준_가격 = 초기_상장가 * delist_price_threshold_ratio`
        b.  `if 새로운_시장_가격 <= 상장폐지_기준_가격 then`
                `해당_주식_상장폐지_경고_횟수 증가`
                `if 해당_주식_상장폐지_경고_횟수 >= delist_warning_duration then`
                    `상장_폐지_처리_실행()`
            `else`
                `해당_주식_상장폐지_경고_횟수 = 0`

---

**이 수식의 핵심:**

*   **슬리피지(1, 2단계):** 대량 거래를 하는 "본인"에게 즉각적인 거래 비용을 부과하여, "대량 매수로 인한 다음 주기 가격 상승분으로 바로 큰 이익을 보는" 문제를 방지합니다.
*   **주기적 업데이트(3단계):** 시스템의 "공식적인" 주식 가격은 정해진 주기에만 변동됩니다. 이 변동에는 이전 주기 동안의 모든 플레이어의 거래량(슬리피지 후 실제 체결량 기준), 시장 심리, 약간의 랜덤성이 종합적으로 반영됩니다.
*   **`현재_시장_가격`의 역할:** 주기 내내 슬리피지 계산의 "기준점"으로 사용되며, 주기 업데이트 시에만 새로운 값으로 갱신됩니다.
*   **`실제_유통_주식_수`의 역할:** 슬리피지 계산 시 "이 정도 주문량이면 시장에 큰 영향을 주겠구나"를 판단하는 기준 + 주기적 업데이트 시 수요공급 영향력 계산의 기준으로 사용됩니다. (실제 구매 가능 물량과는 별개)

이렇게 하면, 플레이어들은 "계속 시장을 봐야 하는" 부담 없이, 정해진 주기마다 업데이트되는 정보를 바탕으로 분석하고 투자할 수 있으며, 동시에 대량 매매 시 발생하는 슬리피지로 인해 시장 조작이나 매크로를 통한 과도한 이익 취득이 어려워집니다.

이 설명이 의도하신 바에 더 가까워졌기를 바랍니다! 😊
